{"ast":null,"code":"import { distinctUntilChanged, distinctUntilKeyChanged, filter, map, pluck, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../state/state.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction ControlsComponent_option_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const op_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", op_r1.key);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(op_r1.value);\n  }\n}\nfunction ControlsComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 4);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const mode_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", mode_r2.key);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(mode_r2.value);\n  }\n}\nfunction ControlsComponent_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 5)(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const selected_r3 = ctx.ngIf;\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate4(\"\", selected_r3.row, \" \", i0.ɵɵpipeBind1(3, 4, ctx_r3.gridOperator$), \" \", selected_r3.col, \" = \", ctx_r3.state.runOpperation(selected_r3.col, selected_r3.row), \"\");\n  }\n}\nfunction ControlsComponent_div_12_button_7_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 9);\n    i0.ɵɵlistener(\"click\", function ControlsComponent_div_12_button_7_Template_button_click_0_listener() {\n      const choice_r6 = i0.ɵɵrestoreView(_r5).$implicit;\n      const ctx_r3 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r3.pickMulti(choice_r6));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const choice_r6 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(choice_r6);\n  }\n}\nfunction ControlsComponent_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6)(1, \"h3\");\n    i0.ɵɵtext(2);\n    i0.ɵɵpipe(3, \"async\");\n    i0.ɵɵpipe(4, \"async\");\n    i0.ɵɵpipe(5, \"async\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"div\", 7);\n    i0.ɵɵtemplate(7, ControlsComponent_div_12_button_7_Template, 2, 1, \"button\", 8);\n    i0.ɵɵpipe(8, \"async\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate3(\"\", i0.ɵɵpipeBind1(3, 4, ctx_r3.selected$).row, \" \", i0.ɵɵpipeBind1(4, 6, ctx_r3.gridOperator$), \" \", i0.ɵɵpipeBind1(5, 8, ctx_r3.selected$).col, \" = \");\n    i0.ɵɵadvance(5);\n    i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(8, 10, ctx_r3.choices$));\n  }\n}\nexport let ControlsComponent = /*#__PURE__*/(() => {\n  class ControlsComponent {\n    constructor(state) {\n      this.state = state;\n      this.operation = [{\n        key: \"+\",\n        value: \"Add\"\n      }, {\n        key: \"x\",\n        value: \"Multiply\"\n      }];\n      // TODO: const/enum these for strong typing\n      this.modes = [{\n        key: \"multiple-choice\",\n        value: \"Multiple Choice\"\n      }, {\n        key: \"explore\",\n        value: \"Explore\"\n      }\n      // { key: \"quiz\", value: \"Quiz\" }\n      ];\n      this.gridOperator$ = this.state.state$.pipe(distinctUntilKeyChanged('operator'), pluck('operator'), tap(data => console.log(data)));\n      this.gridMode$ = this.state.state$.pipe(distinctUntilKeyChanged('mode'), pluck('mode'), tap(data => console.log(data)));\n      this.selected$ = this.state.state$.pipe(distinctUntilKeyChanged('selected'), pluck('selected'));\n      this.choices$ = this.state.state$.pipe(filter(grid => grid.mode === 'multiple-choice'), pluck('selected'), distinctUntilChanged(), map(this.buildChoices.bind(this)));\n    }\n    ngOnInit() {\n      // Not sure why we need a timeout\n      setTimeout(() => {\n        this.setMode(this.modes[0].key);\n      }, 1);\n    }\n    setOperator(opt) {\n      this.state.setOperator(opt);\n    }\n    setMode(type) {\n      this.state.setMode(type);\n    }\n    buildChoices(cell) {\n      if (!cell) {\n        return [];\n      }\n      if (cell.row === 1 && cell.col === 1) {\n        return [0, 1, 2, 3].sort(() => .5 - Math.random());\n      }\n      const NUM_OPTIONS = 4;\n      const MAX_VALUE = 12 * 12; // TODO: Use shared\n      const answer = this.state.runOpperation(cell.row, cell.col);\n      const options = [answer];\n      // if (cell.row !== 2 && cell.col !== 2) {\n      //   options.push(cell.row + cell.col);\n      // }\n      const baseOptions = [cell.row, cell.col, 1];\n      while (options.length < NUM_OPTIONS) {\n        let newVal = answer;\n        const randomPosNeg = Math.random() > 0.5 ? 1 : -1;\n        if (this.state.getOperator() === '+') {\n          newVal += (Math.floor(Math.random() * 2) + 1) * randomPosNeg;\n        } else {\n          // randomly pick row or cell and positive or negative direction\n          let adjustment = baseOptions[Math.floor(Math.random() * baseOptions.length)] * randomPosNeg;\n          // randomly multiply our above multiplicand +-2\n          newVal += adjustment * (Math.floor(Math.random() * 2) + 1);\n        }\n        if (!options.includes(newVal) && newVal > 0 && newVal < MAX_VALUE) {\n          options.push(newVal);\n        }\n      }\n      return options.sort(() => .5 - Math.random());\n    }\n    pickMulti(choice) {\n      const selectedCell = this.state.getSelected();\n      selectedCell.answered = true;\n      selectedCell.correct = this.state.runOpperation(selectedCell.col, selectedCell.row) === choice;\n      const cellIterator = this.state.getCells().entries();\n      const sameRow = [];\n      for (let cellLoop = cellIterator.next(); !cellLoop.done; cellLoop = cellIterator.next()) {\n        if (selectedCell.row === cellLoop.value[1].row && !cellLoop.value[1].answered) {\n          sameRow.push(cellLoop.value[1]);\n        }\n      }\n      let cell = sameRow[Math.floor(Math.random() * sameRow.length)];\n      this.state.setSelected(cell?.id);\n    }\n    static {\n      this.ɵfac = function ControlsComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ControlsComponent)(i0.ɵɵdirectiveInject(i1.StateService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: ControlsComponent,\n        selectors: [[\"app-controls\"]],\n        decls: 15,\n        vars: 18,\n        consts: [[1, \"form-control\", \"grid-mode\", 3, \"change\", \"ngModel\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"explore\", 4, \"ngIf\"], [\"class\", \"multi-choice\", 4, \"ngIf\"], [3, \"value\"], [1, \"explore\"], [1, \"multi-choice\"], [1, \"options\"], [\"class\", \"form-control\", 3, \"click\", 4, \"ngFor\", \"ngForOf\"], [1, \"form-control\", 3, \"click\"]],\n        template: function ControlsComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"h1\");\n            i0.ɵɵtext(1, \"Math Facts\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(2, \"select\", 0);\n            i0.ɵɵpipe(3, \"async\");\n            i0.ɵɵlistener(\"change\", function ControlsComponent_Template_select_change_2_listener($event) {\n              return ctx.setOperator($event.target.value);\n            });\n            i0.ɵɵtemplate(4, ControlsComponent_option_4_Template, 2, 2, \"option\", 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(5, \"br\");\n            i0.ɵɵelementStart(6, \"select\", 0);\n            i0.ɵɵpipe(7, \"async\");\n            i0.ɵɵlistener(\"change\", function ControlsComponent_Template_select_change_6_listener($event) {\n              return ctx.setMode($event.target.value);\n            });\n            i0.ɵɵtemplate(8, ControlsComponent_option_8_Template, 2, 2, \"option\", 1);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(9, ControlsComponent_div_9_Template, 4, 6, \"div\", 2);\n            i0.ɵɵpipe(10, \"async\");\n            i0.ɵɵpipe(11, \"async\");\n            i0.ɵɵtemplate(12, ControlsComponent_div_12_Template, 9, 12, \"div\", 3);\n            i0.ɵɵpipe(13, \"async\");\n            i0.ɵɵpipe(14, \"async\");\n          }\n          if (rf & 2) {\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngModel\", i0.ɵɵpipeBind1(3, 6, ctx.gridOperator$));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.operation);\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngModel\", i0.ɵɵpipeBind1(7, 8, ctx.gridMode$));\n            i0.ɵɵadvance(2);\n            i0.ɵɵproperty(\"ngForOf\", ctx.modes);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 10, ctx.gridMode$) === \"explore\" && i0.ɵɵpipeBind1(11, 12, ctx.selected$));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(13, 14, ctx.gridMode$) === \"multiple-choice\" && i0.ɵɵpipeBind1(14, 16, ctx.selected$));\n          }\n        },\n        dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel, i2.AsyncPipe],\n        styles: [\"[_nghost-%COMP%]{padding:20px}h1[_ngcontent-%COMP%]{font-size:2rem;font-weight:400;margin-bottom:1.5rem}.multi-choice[_ngcontent-%COMP%], .explore[_ngcontent-%COMP%]{margin:40px 0}.multi-choice[_ngcontent-%COMP%]   .options[_ngcontent-%COMP%]{display:flex;justify-content:space-around}.multi-choice[_ngcontent-%COMP%]   .options[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{font-size:20px;padding:0 12px}.multi-choice[_ngcontent-%COMP%]   .options[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]:hover{background-color:#ddd}\"]\n      });\n    }\n  }\n  return ControlsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}