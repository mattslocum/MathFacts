{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport { distinctUntilKeyChanged, map, pluck, tap } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../state/state.service\";\nimport * as i2 from \"@angular/common\";\nfunction GridItemComponent_span_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ctx_r0.state.runOpperation(ctx_r0.column, ctx_r0.row));\n  }\n}\nfunction GridItemComponent_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 2);\n    i0.ɵɵtext(1, \"?\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport let GridItemComponent = /*#__PURE__*/(() => {\n  class GridItemComponent {\n    constructor(state) {\n      this.state = state;\n      this.onHoverColumn = new EventEmitter();\n      this.onHoverRow = new EventEmitter();\n      this.id = Symbol();\n      this.cell = this.initCell();\n      this.isSelected$ = this.state.state$.pipe(distinctUntilKeyChanged('selected'), map(grid => grid.selected?.id === this.id));\n      // used for UI html class name\n      this.mode$ = this.state.state$.pipe(distinctUntilKeyChanged('mode'), pluck('mode'),\n      // reset answered on mode change\n      tap(() => this.cell.answered = false));\n    }\n    ngOnInit() {\n      this.cell = this.initCell();\n      this.state.saveCell(this.cell);\n      // reset answered on operator change\n      this.state.state$.pipe(distinctUntilKeyChanged('operator'), pluck('operator')).subscribe(() => this.cell.answered = false);\n    }\n    onClick() {\n      if (!this.cell.answered) {\n        this.state.setSelected(this.id);\n      }\n      if (this.state.getMode() === 'explore') {\n        this.cell.answered = true;\n        this.cell.correct = true;\n      }\n    }\n    initCell() {\n      return {\n        id: this.id,\n        col: this.column,\n        row: this.row,\n        answered: false\n      };\n    }\n    onMouseOver() {\n      this.onHoverColumn.next(this.column);\n      this.onHoverRow.next(this.row);\n    }\n    onMouseOut() {\n      this.onHoverColumn.next(null);\n      this.onHoverRow.next(null);\n    }\n    static {\n      this.ɵfac = function GridItemComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || GridItemComponent)(i0.ɵɵdirectiveInject(i1.StateService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: GridItemComponent,\n        selectors: [[\"app-grid-item\"]],\n        hostBindings: function GridItemComponent_HostBindings(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵlistener(\"click\", function GridItemComponent_click_HostBindingHandler() {\n              return ctx.onClick();\n            });\n          }\n        },\n        inputs: {\n          column: \"column\",\n          row: \"row\"\n        },\n        outputs: {\n          onHoverColumn: \"onHoverColumn\",\n          onHoverRow: \"onHoverRow\"\n        },\n        decls: 7,\n        vars: 17,\n        consts: [[3, \"mouseover\", \"mouseout\", \"ngClass\"], [\"class\", \"answer\", 4, \"ngIf\"], [1, \"answer\"]],\n        template: function GridItemComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0);\n            i0.ɵɵpipe(1, \"async\");\n            i0.ɵɵpipe(2, \"async\");\n            i0.ɵɵpipe(3, \"async\");\n            i0.ɵɵlistener(\"mouseover\", function GridItemComponent_Template_div_mouseover_0_listener() {\n              return ctx.onMouseOver();\n            })(\"mouseout\", function GridItemComponent_Template_div_mouseout_0_listener() {\n              return ctx.onMouseOut();\n            });\n            i0.ɵɵtemplate(4, GridItemComponent_span_4_Template, 2, 1, \"span\", 1)(5, GridItemComponent_span_5_Template, 2, 0, \"span\", 1);\n            i0.ɵɵpipe(6, \"async\");\n            i0.ɵɵelementEnd();\n          }\n          if (rf & 2) {\n            i0.ɵɵclassProp(\"answered\", ctx.cell.answered || i0.ɵɵpipeBind1(1, 9, ctx.isSelected$))(\"selected\", i0.ɵɵpipeBind1(2, 11, ctx.isSelected$))(\"wrong\", ctx.cell.answered && !ctx.cell.correct);\n            i0.ɵɵproperty(\"ngClass\", i0.ɵɵpipeBind1(3, 13, ctx.mode$));\n            i0.ɵɵadvance(4);\n            i0.ɵɵproperty(\"ngIf\", ctx.cell.answered);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", !ctx.cell.answered && i0.ɵɵpipeBind1(6, 15, ctx.isSelected$));\n          }\n        },\n        dependencies: [i2.NgClass, i2.NgIf, i2.AsyncPipe],\n        styles: [\"[_nghost-%COMP%]{height:100%;width:100%;display:block}div[_ngcontent-%COMP%]{align-items:center;border:1px solid #bbb;box-sizing:border-box;display:flex;height:100%;justify-content:center;width:100%}span[_ngcontent-%COMP%]{display:none;-webkit-user-select:none;user-select:none}.answered[_ngcontent-%COMP%]{background-color:green}.answered[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]{display:inline;vertical-align:middle;line-height:initial}.selected[_ngcontent-%COMP%]{background-color:#27b1aa}.wrong[_ngcontent-%COMP%]{background-color:#8b0000}\"]\n      });\n    }\n  }\n  return GridItemComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}