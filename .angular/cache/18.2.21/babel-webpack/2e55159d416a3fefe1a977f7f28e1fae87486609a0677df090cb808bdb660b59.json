{"ast":null,"code":"import { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport let StateService = /*#__PURE__*/(() => {\n  class StateService {\n    constructor() {\n      // TODO: Do we need to keep an instance outside of the subject?\n      this._state = {\n        gridCells: new Map(),\n        mode: '',\n        operator: '*'\n      };\n      // TODO: Consider switching to ngrx\n      this._stateSubject = new BehaviorSubject(this._state);\n      this.state$ = this._stateSubject.asObservable();\n    }\n    setMode(mode) {\n      this._state = {\n        ...this._state,\n        mode,\n        selected: null\n      };\n      this._stateSubject.next(this._state);\n    }\n    setOperator(operator) {\n      this._state = {\n        ...this._state,\n        operator: operator,\n        selected: null\n      };\n      this._stateSubject.next(this._state);\n    }\n    saveCell(cell) {\n      this._state.gridCells.set(cell.id, cell);\n    }\n    setSelected(cellId) {\n      this._state = {\n        ...this._state,\n        selected: this._state.gridCells.get(cellId)\n      };\n      this._stateSubject.next(this._state);\n    }\n    getMode() {\n      return this._state.mode;\n    }\n    getOperator() {\n      return this._state.operator;\n    }\n    getSelected() {\n      return this._state.selected;\n    }\n    getCells() {\n      return this._state.gridCells;\n    }\n    runOpperation(a, b) {\n      switch (this._state.operator) {\n        case '+':\n          return a + b;\n        case 'x':\n          return a * b;\n      }\n      return 0;\n    }\n    static {\n      this.ɵfac = function StateService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || StateService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: StateService,\n        factory: StateService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return StateService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}